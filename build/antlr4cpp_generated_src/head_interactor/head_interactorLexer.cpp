
// Generated from /home/oster/Electrolisys/grammar/head_interactor.g4 by ANTLR 4.13.1


#include "head_interactorLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Head_interactorLexerStaticData final {
  Head_interactorLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Head_interactorLexerStaticData(const Head_interactorLexerStaticData&) = delete;
  Head_interactorLexerStaticData(Head_interactorLexerStaticData&&) = delete;
  Head_interactorLexerStaticData& operator=(const Head_interactorLexerStaticData&) = delete;
  Head_interactorLexerStaticData& operator=(Head_interactorLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag head_interactorlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Head_interactorLexerStaticData *head_interactorlexerLexerStaticData = nullptr;

void head_interactorlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (head_interactorlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(head_interactorlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Head_interactorLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "A", 
      "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
      "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "VARIABLE", 
      "DATABASE", "WS", "EOL", "LARGER", "LARGER_EQUAL", "EQUAL", "LESS", 
      "LESS_EQUAL", "UINT", "ADD", "SUB", "MUL", "DIV", "POW", "SUMPRODUCT", 
      "SUMPRODUCT_I", "SUM", "SUM_I", "PRODUCT", "PRODUCT_I", "LN", "LG", 
      "LOG_X", "EXP", "SQRT", "PI", "COS", "SIN", "ASIN", "ACOS", "FACTORIAL", 
      "QUOTE", "ASTERISK", "INT", "EXPONENT", "FLOAT", "ID_NUMBER", "STRING"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "';'", "'VAR('", "':'", "'['", "']'", "'\"'", "", 
      "", "", "", "'>'", "", "'='", "", "'<'", "", "'+'", "'-'", "'*'", 
      "'/'", "'^'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'''"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "VARIABLE", "DATABASE", "WS", 
      "EOL", "LARGER", "LARGER_EQUAL", "EQUAL", "LESS", "LESS_EQUAL", "UINT", 
      "ADD", "SUB", "MUL", "DIV", "POW", "SUMPRODUCT", "SUMPRODUCT_I", "SUM", 
      "SUM_I", "PRODUCT", "PRODUCT_I", "LN", "LG", "LOG_X", "EXP", "SQRT", 
      "PI", "COS", "SIN", "ASIN", "ACOS", "FACTORIAL", "QUOTE", "ASTERISK", 
      "EXPONENT", "FLOAT", "ID_NUMBER", "STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,46,424,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
  	1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
  	12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
  	19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
  	26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
  	33,1,33,1,34,1,34,1,34,1,34,3,34,223,8,34,1,34,5,34,226,8,34,10,34,12,
  	34,229,9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,239,8,35,10,
  	35,12,35,242,9,35,1,35,1,35,1,35,1,35,1,35,1,36,4,36,250,8,36,11,36,12,
  	36,251,1,36,1,36,1,37,3,37,257,8,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,
  	1,39,3,39,267,8,39,1,40,1,40,1,41,1,41,1,41,1,41,3,41,275,8,41,1,42,1,
  	42,1,43,4,43,280,8,43,11,43,12,43,281,1,43,3,43,285,8,43,1,44,1,44,1,
  	45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,
  	52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
  	54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,
  	58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,
  	61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,67,1,67,4,67,384,8,67,11,
  	67,12,67,385,1,68,3,68,389,8,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,
  	70,1,70,3,70,400,8,70,1,71,4,71,403,8,71,11,71,12,71,404,1,72,1,72,5,
  	72,409,8,72,10,72,12,72,412,9,72,1,72,1,72,1,72,5,72,417,8,72,10,72,12,
  	72,420,9,72,1,72,3,72,423,8,72,0,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,
  	0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,69,9,71,
  	10,73,11,75,12,77,13,79,14,81,15,83,16,85,17,87,18,89,19,91,20,93,21,
  	95,22,97,23,99,24,101,25,103,26,105,27,107,28,109,29,111,30,113,31,115,
  	32,117,33,119,34,121,35,123,36,125,37,127,38,129,39,131,40,133,41,135,
  	42,137,0,139,43,141,44,143,45,145,46,1,0,35,2,0,65,65,97,97,2,0,66,66,
  	98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,
  	102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,
  	106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,
  	110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,
  	114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,
  	118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,
  	122,2,0,65,90,97,122,3,0,48,57,65,90,97,122,4,0,48,57,65,90,95,95,97,
  	122,5,0,32,33,35,35,39,41,44,44,59,59,2,0,9,9,32,32,1,0,48,57,2,0,43,
  	43,45,45,1,0,34,34,1,0,39,39,413,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
  	0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,69,1,
  	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
  	0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,
  	91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
  	1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
  	1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
  	1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
  	1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,3,149,1,0,0,0,5,151,1,0,0,0,7,153,
  	1,0,0,0,9,158,1,0,0,0,11,160,1,0,0,0,13,162,1,0,0,0,15,164,1,0,0,0,17,
  	166,1,0,0,0,19,168,1,0,0,0,21,170,1,0,0,0,23,172,1,0,0,0,25,174,1,0,0,
  	0,27,176,1,0,0,0,29,178,1,0,0,0,31,180,1,0,0,0,33,182,1,0,0,0,35,184,
  	1,0,0,0,37,186,1,0,0,0,39,188,1,0,0,0,41,190,1,0,0,0,43,192,1,0,0,0,45,
  	194,1,0,0,0,47,196,1,0,0,0,49,198,1,0,0,0,51,200,1,0,0,0,53,202,1,0,0,
  	0,55,204,1,0,0,0,57,206,1,0,0,0,59,208,1,0,0,0,61,210,1,0,0,0,63,212,
  	1,0,0,0,65,214,1,0,0,0,67,216,1,0,0,0,69,218,1,0,0,0,71,232,1,0,0,0,73,
  	249,1,0,0,0,75,256,1,0,0,0,77,260,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,
  	0,83,274,1,0,0,0,85,276,1,0,0,0,87,279,1,0,0,0,89,286,1,0,0,0,91,288,
  	1,0,0,0,93,290,1,0,0,0,95,292,1,0,0,0,97,294,1,0,0,0,99,296,1,0,0,0,101,
  	307,1,0,0,0,103,311,1,0,0,0,105,315,1,0,0,0,107,319,1,0,0,0,109,327,1,
  	0,0,0,111,331,1,0,0,0,113,334,1,0,0,0,115,337,1,0,0,0,117,343,1,0,0,0,
  	119,347,1,0,0,0,121,352,1,0,0,0,123,355,1,0,0,0,125,359,1,0,0,0,127,363,
  	1,0,0,0,129,366,1,0,0,0,131,369,1,0,0,0,133,379,1,0,0,0,135,381,1,0,0,
  	0,137,388,1,0,0,0,139,392,1,0,0,0,141,395,1,0,0,0,143,402,1,0,0,0,145,
  	422,1,0,0,0,147,148,5,40,0,0,148,2,1,0,0,0,149,150,5,41,0,0,150,4,1,0,
  	0,0,151,152,5,59,0,0,152,6,1,0,0,0,153,154,5,86,0,0,154,155,5,65,0,0,
  	155,156,5,82,0,0,156,157,5,40,0,0,157,8,1,0,0,0,158,159,5,58,0,0,159,
  	10,1,0,0,0,160,161,5,91,0,0,161,12,1,0,0,0,162,163,5,93,0,0,163,14,1,
  	0,0,0,164,165,5,34,0,0,165,16,1,0,0,0,166,167,7,0,0,0,167,18,1,0,0,0,
  	168,169,7,1,0,0,169,20,1,0,0,0,170,171,7,2,0,0,171,22,1,0,0,0,172,173,
  	7,3,0,0,173,24,1,0,0,0,174,175,7,4,0,0,175,26,1,0,0,0,176,177,7,5,0,0,
  	177,28,1,0,0,0,178,179,7,6,0,0,179,30,1,0,0,0,180,181,7,7,0,0,181,32,
  	1,0,0,0,182,183,7,8,0,0,183,34,1,0,0,0,184,185,7,9,0,0,185,36,1,0,0,0,
  	186,187,7,10,0,0,187,38,1,0,0,0,188,189,7,11,0,0,189,40,1,0,0,0,190,191,
  	7,12,0,0,191,42,1,0,0,0,192,193,7,13,0,0,193,44,1,0,0,0,194,195,7,14,
  	0,0,195,46,1,0,0,0,196,197,7,15,0,0,197,48,1,0,0,0,198,199,7,16,0,0,199,
  	50,1,0,0,0,200,201,7,17,0,0,201,52,1,0,0,0,202,203,7,18,0,0,203,54,1,
  	0,0,0,204,205,7,19,0,0,205,56,1,0,0,0,206,207,7,20,0,0,207,58,1,0,0,0,
  	208,209,7,21,0,0,209,60,1,0,0,0,210,211,7,22,0,0,211,62,1,0,0,0,212,213,
  	7,23,0,0,213,64,1,0,0,0,214,215,7,24,0,0,215,66,1,0,0,0,216,217,7,25,
  	0,0,217,68,1,0,0,0,218,219,5,35,0,0,219,227,7,26,0,0,220,223,3,133,66,
  	0,221,223,3,135,67,0,222,220,1,0,0,0,222,221,1,0,0,0,223,226,1,0,0,0,
  	224,226,7,27,0,0,225,222,1,0,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,
  	225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,6,
  	34,0,0,231,70,1,0,0,0,232,233,5,33,0,0,233,234,5,40,0,0,234,235,5,39,
  	0,0,235,236,1,0,0,0,236,240,7,28,0,0,237,239,8,29,0,0,238,237,1,0,0,0,
  	239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,
  	1,0,0,0,243,244,5,39,0,0,244,245,5,41,0,0,245,246,1,0,0,0,246,247,6,35,
  	1,0,247,72,1,0,0,0,248,250,7,30,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,
  	249,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,6,36,2,0,254,74,1,
  	0,0,0,255,257,5,13,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,
  	0,258,259,5,10,0,0,259,76,1,0,0,0,260,261,5,62,0,0,261,78,1,0,0,0,262,
  	263,5,62,0,0,263,267,5,61,0,0,264,265,5,61,0,0,265,267,5,62,0,0,266,262,
  	1,0,0,0,266,264,1,0,0,0,267,80,1,0,0,0,268,269,5,61,0,0,269,82,1,0,0,
  	0,270,271,5,60,0,0,271,275,5,61,0,0,272,273,5,61,0,0,273,275,5,60,0,0,
  	274,270,1,0,0,0,274,272,1,0,0,0,275,84,1,0,0,0,276,277,5,60,0,0,277,86,
  	1,0,0,0,278,280,7,31,0,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,
  	0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,285,3,139,69,0,284,283,1,0,0,
  	0,284,285,1,0,0,0,285,88,1,0,0,0,286,287,5,43,0,0,287,90,1,0,0,0,288,
  	289,5,45,0,0,289,92,1,0,0,0,290,291,5,42,0,0,291,94,1,0,0,0,292,293,5,
  	47,0,0,293,96,1,0,0,0,294,295,5,94,0,0,295,98,1,0,0,0,296,297,3,53,26,
  	0,297,298,3,57,28,0,298,299,3,41,20,0,299,300,3,47,23,0,300,301,3,51,
  	25,0,301,302,3,45,22,0,302,303,3,23,11,0,303,304,3,57,28,0,304,305,3,
  	21,10,0,305,306,3,55,27,0,306,100,1,0,0,0,307,308,3,99,49,0,308,309,5,
  	95,0,0,309,310,3,33,16,0,310,102,1,0,0,0,311,312,3,53,26,0,312,313,3,
  	57,28,0,313,314,3,41,20,0,314,104,1,0,0,0,315,316,3,103,51,0,316,317,
  	5,95,0,0,317,318,3,33,16,0,318,106,1,0,0,0,319,320,3,47,23,0,320,321,
  	3,51,25,0,321,322,3,45,22,0,322,323,3,23,11,0,323,324,3,57,28,0,324,325,
  	3,21,10,0,325,326,3,55,27,0,326,108,1,0,0,0,327,328,3,107,53,0,328,329,
  	5,95,0,0,329,330,3,33,16,0,330,110,1,0,0,0,331,332,3,39,19,0,332,333,
  	3,43,21,0,333,112,1,0,0,0,334,335,3,39,19,0,335,336,3,29,14,0,336,114,
  	1,0,0,0,337,338,3,39,19,0,338,339,3,45,22,0,339,340,3,29,14,0,340,341,
  	5,95,0,0,341,342,3,63,31,0,342,116,1,0,0,0,343,344,3,25,12,0,344,345,
  	3,63,31,0,345,346,3,47,23,0,346,118,1,0,0,0,347,348,3,53,26,0,348,349,
  	3,49,24,0,349,350,3,51,25,0,350,351,3,55,27,0,351,120,1,0,0,0,352,353,
  	3,47,23,0,353,354,3,33,16,0,354,122,1,0,0,0,355,356,3,21,10,0,356,357,
  	3,45,22,0,357,358,3,53,26,0,358,124,1,0,0,0,359,360,3,53,26,0,360,361,
  	3,33,16,0,361,362,3,43,21,0,362,126,1,0,0,0,363,364,3,17,8,0,364,365,
  	3,125,62,0,365,128,1,0,0,0,366,367,3,17,8,0,367,368,3,123,61,0,368,130,
  	1,0,0,0,369,370,3,27,13,0,370,371,3,17,8,0,371,372,3,21,10,0,372,373,
  	3,55,27,0,373,374,3,45,22,0,374,375,3,51,25,0,375,376,3,33,16,0,376,377,
  	3,17,8,0,377,378,3,39,19,0,378,132,1,0,0,0,379,380,5,39,0,0,380,134,1,
  	0,0,0,381,383,5,94,0,0,382,384,5,42,0,0,383,382,1,0,0,0,384,385,1,0,0,
  	0,385,383,1,0,0,0,385,386,1,0,0,0,386,136,1,0,0,0,387,389,7,32,0,0,388,
  	387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,3,87,43,0,391,138,
  	1,0,0,0,392,393,7,4,0,0,393,394,3,137,68,0,394,140,1,0,0,0,395,396,3,
  	137,68,0,396,397,5,46,0,0,397,399,3,87,43,0,398,400,3,139,69,0,399,398,
  	1,0,0,0,399,400,1,0,0,0,400,142,1,0,0,0,401,403,7,31,0,0,402,401,1,0,
  	0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,144,1,0,0,0,406,
  	410,5,34,0,0,407,409,8,33,0,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,
  	1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,423,5,34,
  	0,0,414,418,5,39,0,0,415,417,8,34,0,0,416,415,1,0,0,0,417,420,1,0,0,0,
  	418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,423,
  	5,39,0,0,422,406,1,0,0,0,422,414,1,0,0,0,423,146,1,0,0,0,18,0,222,225,
  	227,240,251,256,266,274,281,284,385,388,399,404,410,418,422,3,1,34,0,
  	1,35,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  head_interactorlexerLexerStaticData = staticData.release();
}

}

head_interactorLexer::head_interactorLexer(CharStream *input) : Lexer(input) {
  head_interactorLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *head_interactorlexerLexerStaticData->atn, head_interactorlexerLexerStaticData->decisionToDFA, head_interactorlexerLexerStaticData->sharedContextCache);
}

head_interactorLexer::~head_interactorLexer() {
  delete _interpreter;
}

std::string head_interactorLexer::getGrammarFileName() const {
  return "head_interactor.g4";
}

const std::vector<std::string>& head_interactorLexer::getRuleNames() const {
  return head_interactorlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& head_interactorLexer::getChannelNames() const {
  return head_interactorlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& head_interactorLexer::getModeNames() const {
  return head_interactorlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& head_interactorLexer::getVocabulary() const {
  return head_interactorlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView head_interactorLexer::getSerializedATN() const {
  return head_interactorlexerLexerStaticData->serializedATN;
}

const atn::ATN& head_interactorLexer::getATN() const {
  return *head_interactorlexerLexerStaticData->atn;
}


void head_interactorLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 34: VARIABLEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 35: DATABASEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void head_interactorLexer::VARIABLEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: setText(getText().substr(1, getText().length()-1)); break;

  default:
    break;
  }
}

void head_interactorLexer::DATABASEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: setText(getText().substr(3, getText().length()-5)); break;

  default:
    break;
  }
}



void head_interactorLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  head_interactorlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(head_interactorlexerLexerOnceFlag, head_interactorlexerLexerInitialize);
#endif
}
