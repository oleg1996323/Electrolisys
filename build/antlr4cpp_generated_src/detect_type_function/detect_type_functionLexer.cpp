
// Generated from /home/oster/Electrolisys/grammar/detect_type_function.g4 by ANTLR 4.13.1


#include "detect_type_functionLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Detect_type_functionLexerStaticData final {
  Detect_type_functionLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Detect_type_functionLexerStaticData(const Detect_type_functionLexerStaticData&) = delete;
  Detect_type_functionLexerStaticData(Detect_type_functionLexerStaticData&&) = delete;
  Detect_type_functionLexerStaticData& operator=(const Detect_type_functionLexerStaticData&) = delete;
  Detect_type_functionLexerStaticData& operator=(Detect_type_functionLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag detect_type_functionlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Detect_type_functionLexerStaticData *detect_type_functionlexerLexerStaticData = nullptr;

void detect_type_functionlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (detect_type_functionlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(detect_type_functionlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Detect_type_functionLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "VARIABLE", 
      "DATABASE", "LARGER", "LARGER_EQUAL", "EQUAL", "LESS", "LESS_EQUAL", 
      "SUMPRODUCT", "SUMPRODUCT_I", "SUM", "SUM_I", "PRODUCT", "PRODUCT_I", 
      "LN", "LG", "LOG_X", "EXP", "SQRT", "PI", "COS", "SIN", "ASIN", "ACOS", 
      "FACTORIAL", "STRING", "A", "B", "C", "D", "E", "F", "G", "H", "I", 
      "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", 
      "X", "Y", "Z", "WS", "EOL", "UINT", "ADD", "SUB", "MUL", "DIV", "POW", 
      "QUOTE", "ASTERISK", "INT", "EXPONENT", "FLOAT", "ID_NUMBER"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "';'", "'VAR('", "'['", "']'", "'\"'", "", "", "'>'", 
      "", "'='", "", "'<'", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "'+'", "'-'", "'*'", "'/'", 
      "'^'", "'''"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "VARIABLE", "DATABASE", "LARGER", 
      "LARGER_EQUAL", "EQUAL", "LESS", "LESS_EQUAL", "SUMPRODUCT", "SUMPRODUCT_I", 
      "SUM", "SUM_I", "PRODUCT", "PRODUCT_I", "LN", "LG", "LOG_X", "EXP", 
      "SQRT", "PI", "COS", "SIN", "ASIN", "ACOS", "FACTORIAL", "STRING", 
      "WS", "EOL", "UINT", "ADD", "SUB", "MUL", "DIV", "POW", "QUOTE", "ASTERISK", 
      "EXPONENT", "FLOAT", "ID_NUMBER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,45,420,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
  	5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,3,7,167,8,7,1,7,5,7,170,8,7,10,7,12,7,173,
  	9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,183,8,8,10,8,12,8,186,9,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,3,10,199,8,10,1,11,1,11,1,
  	12,1,12,1,12,1,12,3,12,207,8,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
  	17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
  	19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
  	26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,5,31,296,8,31,10,31,12,
  	31,299,9,31,1,31,1,31,1,31,5,31,304,8,31,10,31,12,31,307,9,31,1,31,3,
  	31,310,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
  	37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
  	44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
  	51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,4,
  	58,365,8,58,11,58,12,58,366,1,58,1,58,1,59,3,59,372,8,59,1,59,1,59,1,
  	60,4,60,377,8,60,11,60,12,60,378,1,60,3,60,382,8,60,1,61,1,61,1,62,1,
  	62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,4,67,398,8,67,11,
  	67,12,67,399,1,68,3,68,403,8,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,
  	70,1,70,3,70,414,8,70,1,71,4,71,417,8,71,11,71,12,71,418,0,0,72,1,1,3,
  	2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
  	31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
  	27,55,28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,0,73,0,75,0,77,0,79,
  	0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,0,
  	107,0,109,0,111,0,113,0,115,0,117,33,119,34,121,35,123,36,125,37,127,
  	38,129,39,131,40,133,41,135,42,137,0,139,43,141,44,143,45,1,0,35,2,0,
  	65,90,97,122,3,0,48,57,65,90,97,122,4,0,48,57,65,90,95,95,97,122,5,0,
  	32,33,35,35,39,41,44,44,59,59,1,0,34,34,1,0,39,39,2,0,65,65,97,97,2,0,
  	66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,
  	70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,
  	74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,
  	0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,
  	2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,
  	2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,
  	2,0,90,90,122,122,2,0,9,9,32,32,1,0,48,57,2,0,43,43,45,45,409,0,1,1,0,
  	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
  	1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
  	0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
  	0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
  	1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
  	0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,117,1,0,0,0,
  	0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,
  	0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,139,1,0,0,0,
  	0,141,1,0,0,0,0,143,1,0,0,0,1,145,1,0,0,0,3,147,1,0,0,0,5,149,1,0,0,0,
  	7,151,1,0,0,0,9,156,1,0,0,0,11,158,1,0,0,0,13,160,1,0,0,0,15,162,1,0,
  	0,0,17,176,1,0,0,0,19,192,1,0,0,0,21,198,1,0,0,0,23,200,1,0,0,0,25,206,
  	1,0,0,0,27,208,1,0,0,0,29,210,1,0,0,0,31,221,1,0,0,0,33,225,1,0,0,0,35,
  	229,1,0,0,0,37,233,1,0,0,0,39,241,1,0,0,0,41,245,1,0,0,0,43,248,1,0,0,
  	0,45,251,1,0,0,0,47,257,1,0,0,0,49,261,1,0,0,0,51,266,1,0,0,0,53,269,
  	1,0,0,0,55,273,1,0,0,0,57,277,1,0,0,0,59,280,1,0,0,0,61,283,1,0,0,0,63,
  	309,1,0,0,0,65,311,1,0,0,0,67,313,1,0,0,0,69,315,1,0,0,0,71,317,1,0,0,
  	0,73,319,1,0,0,0,75,321,1,0,0,0,77,323,1,0,0,0,79,325,1,0,0,0,81,327,
  	1,0,0,0,83,329,1,0,0,0,85,331,1,0,0,0,87,333,1,0,0,0,89,335,1,0,0,0,91,
  	337,1,0,0,0,93,339,1,0,0,0,95,341,1,0,0,0,97,343,1,0,0,0,99,345,1,0,0,
  	0,101,347,1,0,0,0,103,349,1,0,0,0,105,351,1,0,0,0,107,353,1,0,0,0,109,
  	355,1,0,0,0,111,357,1,0,0,0,113,359,1,0,0,0,115,361,1,0,0,0,117,364,1,
  	0,0,0,119,371,1,0,0,0,121,376,1,0,0,0,123,383,1,0,0,0,125,385,1,0,0,0,
  	127,387,1,0,0,0,129,389,1,0,0,0,131,391,1,0,0,0,133,393,1,0,0,0,135,395,
  	1,0,0,0,137,402,1,0,0,0,139,406,1,0,0,0,141,409,1,0,0,0,143,416,1,0,0,
  	0,145,146,5,40,0,0,146,2,1,0,0,0,147,148,5,41,0,0,148,4,1,0,0,0,149,150,
  	5,59,0,0,150,6,1,0,0,0,151,152,5,86,0,0,152,153,5,65,0,0,153,154,5,82,
  	0,0,154,155,5,40,0,0,155,8,1,0,0,0,156,157,5,91,0,0,157,10,1,0,0,0,158,
  	159,5,93,0,0,159,12,1,0,0,0,160,161,5,34,0,0,161,14,1,0,0,0,162,163,5,
  	35,0,0,163,171,7,0,0,0,164,167,3,133,66,0,165,167,3,135,67,0,166,164,
  	1,0,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,170,7,1,0,0,169,166,1,0,0,
  	0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,
  	174,1,0,0,0,173,171,1,0,0,0,174,175,6,7,0,0,175,16,1,0,0,0,176,177,5,
  	33,0,0,177,178,5,40,0,0,178,179,5,39,0,0,179,180,1,0,0,0,180,184,7,2,
  	0,0,181,183,8,3,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,
  	185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,39,0,0,188,189,
  	5,41,0,0,189,190,1,0,0,0,190,191,6,8,1,0,191,18,1,0,0,0,192,193,5,62,
  	0,0,193,20,1,0,0,0,194,195,5,62,0,0,195,199,5,61,0,0,196,197,5,61,0,0,
  	197,199,5,62,0,0,198,194,1,0,0,0,198,196,1,0,0,0,199,22,1,0,0,0,200,201,
  	5,61,0,0,201,24,1,0,0,0,202,203,5,60,0,0,203,207,5,61,0,0,204,205,5,61,
  	0,0,205,207,5,60,0,0,206,202,1,0,0,0,206,204,1,0,0,0,207,26,1,0,0,0,208,
  	209,5,60,0,0,209,28,1,0,0,0,210,211,3,101,50,0,211,212,3,105,52,0,212,
  	213,3,89,44,0,213,214,3,95,47,0,214,215,3,99,49,0,215,216,3,93,46,0,216,
  	217,3,71,35,0,217,218,3,105,52,0,218,219,3,69,34,0,219,220,3,103,51,0,
  	220,30,1,0,0,0,221,222,3,29,14,0,222,223,5,95,0,0,223,224,3,81,40,0,224,
  	32,1,0,0,0,225,226,3,101,50,0,226,227,3,105,52,0,227,228,3,89,44,0,228,
  	34,1,0,0,0,229,230,3,33,16,0,230,231,5,95,0,0,231,232,3,81,40,0,232,36,
  	1,0,0,0,233,234,3,95,47,0,234,235,3,99,49,0,235,236,3,93,46,0,236,237,
  	3,71,35,0,237,238,3,105,52,0,238,239,3,69,34,0,239,240,3,103,51,0,240,
  	38,1,0,0,0,241,242,3,37,18,0,242,243,5,95,0,0,243,244,3,81,40,0,244,40,
  	1,0,0,0,245,246,3,87,43,0,246,247,3,91,45,0,247,42,1,0,0,0,248,249,3,
  	87,43,0,249,250,3,77,38,0,250,44,1,0,0,0,251,252,3,87,43,0,252,253,3,
  	93,46,0,253,254,3,77,38,0,254,255,5,95,0,0,255,256,3,111,55,0,256,46,
  	1,0,0,0,257,258,3,73,36,0,258,259,3,111,55,0,259,260,3,95,47,0,260,48,
  	1,0,0,0,261,262,3,101,50,0,262,263,3,97,48,0,263,264,3,99,49,0,264,265,
  	3,103,51,0,265,50,1,0,0,0,266,267,3,95,47,0,267,268,3,81,40,0,268,52,
  	1,0,0,0,269,270,3,69,34,0,270,271,3,93,46,0,271,272,3,101,50,0,272,54,
  	1,0,0,0,273,274,3,101,50,0,274,275,3,81,40,0,275,276,3,91,45,0,276,56,
  	1,0,0,0,277,278,3,65,32,0,278,279,3,55,27,0,279,58,1,0,0,0,280,281,3,
  	65,32,0,281,282,3,53,26,0,282,60,1,0,0,0,283,284,3,75,37,0,284,285,3,
  	65,32,0,285,286,3,69,34,0,286,287,3,103,51,0,287,288,3,93,46,0,288,289,
  	3,99,49,0,289,290,3,81,40,0,290,291,3,65,32,0,291,292,3,87,43,0,292,62,
  	1,0,0,0,293,297,5,34,0,0,294,296,8,4,0,0,295,294,1,0,0,0,296,299,1,0,
  	0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,
  	310,5,34,0,0,301,305,5,39,0,0,302,304,8,5,0,0,303,302,1,0,0,0,304,307,
  	1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,
  	0,308,310,5,39,0,0,309,293,1,0,0,0,309,301,1,0,0,0,310,64,1,0,0,0,311,
  	312,7,6,0,0,312,66,1,0,0,0,313,314,7,7,0,0,314,68,1,0,0,0,315,316,7,8,
  	0,0,316,70,1,0,0,0,317,318,7,9,0,0,318,72,1,0,0,0,319,320,7,10,0,0,320,
  	74,1,0,0,0,321,322,7,11,0,0,322,76,1,0,0,0,323,324,7,12,0,0,324,78,1,
  	0,0,0,325,326,7,13,0,0,326,80,1,0,0,0,327,328,7,14,0,0,328,82,1,0,0,0,
  	329,330,7,15,0,0,330,84,1,0,0,0,331,332,7,16,0,0,332,86,1,0,0,0,333,334,
  	7,17,0,0,334,88,1,0,0,0,335,336,7,18,0,0,336,90,1,0,0,0,337,338,7,19,
  	0,0,338,92,1,0,0,0,339,340,7,20,0,0,340,94,1,0,0,0,341,342,7,21,0,0,342,
  	96,1,0,0,0,343,344,7,22,0,0,344,98,1,0,0,0,345,346,7,23,0,0,346,100,1,
  	0,0,0,347,348,7,24,0,0,348,102,1,0,0,0,349,350,7,25,0,0,350,104,1,0,0,
  	0,351,352,7,26,0,0,352,106,1,0,0,0,353,354,7,27,0,0,354,108,1,0,0,0,355,
  	356,7,28,0,0,356,110,1,0,0,0,357,358,7,29,0,0,358,112,1,0,0,0,359,360,
  	7,30,0,0,360,114,1,0,0,0,361,362,7,31,0,0,362,116,1,0,0,0,363,365,7,32,
  	0,0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,
  	368,1,0,0,0,368,369,6,58,2,0,369,118,1,0,0,0,370,372,5,13,0,0,371,370,
  	1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,5,10,0,0,374,120,1,0,
  	0,0,375,377,7,33,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,
  	378,379,1,0,0,0,379,381,1,0,0,0,380,382,3,139,69,0,381,380,1,0,0,0,381,
  	382,1,0,0,0,382,122,1,0,0,0,383,384,5,43,0,0,384,124,1,0,0,0,385,386,
  	5,45,0,0,386,126,1,0,0,0,387,388,5,42,0,0,388,128,1,0,0,0,389,390,5,47,
  	0,0,390,130,1,0,0,0,391,392,5,94,0,0,392,132,1,0,0,0,393,394,5,39,0,0,
  	394,134,1,0,0,0,395,397,5,94,0,0,396,398,5,42,0,0,397,396,1,0,0,0,398,
  	399,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,136,1,0,0,0,401,403,7,
  	34,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,3,121,
  	60,0,405,138,1,0,0,0,406,407,7,10,0,0,407,408,3,137,68,0,408,140,1,0,
  	0,0,409,410,3,137,68,0,410,411,5,46,0,0,411,413,3,121,60,0,412,414,3,
  	139,69,0,413,412,1,0,0,0,413,414,1,0,0,0,414,142,1,0,0,0,415,417,7,33,
  	0,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
  	144,1,0,0,0,18,0,166,169,171,184,198,206,297,305,309,366,371,378,381,
  	399,402,413,418,3,1,7,0,1,8,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  detect_type_functionlexerLexerStaticData = staticData.release();
}

}

detect_type_functionLexer::detect_type_functionLexer(CharStream *input) : Lexer(input) {
  detect_type_functionLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *detect_type_functionlexerLexerStaticData->atn, detect_type_functionlexerLexerStaticData->decisionToDFA, detect_type_functionlexerLexerStaticData->sharedContextCache);
}

detect_type_functionLexer::~detect_type_functionLexer() {
  delete _interpreter;
}

std::string detect_type_functionLexer::getGrammarFileName() const {
  return "detect_type_function.g4";
}

const std::vector<std::string>& detect_type_functionLexer::getRuleNames() const {
  return detect_type_functionlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& detect_type_functionLexer::getChannelNames() const {
  return detect_type_functionlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& detect_type_functionLexer::getModeNames() const {
  return detect_type_functionlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& detect_type_functionLexer::getVocabulary() const {
  return detect_type_functionlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView detect_type_functionLexer::getSerializedATN() const {
  return detect_type_functionlexerLexerStaticData->serializedATN;
}

const atn::ATN& detect_type_functionLexer::getATN() const {
  return *detect_type_functionlexerLexerStaticData->atn;
}


void detect_type_functionLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 7: VARIABLEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 8: DATABASEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void detect_type_functionLexer::VARIABLEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: setText(getText().substr(1, getText().length()-1)); break;

  default:
    break;
  }
}

void detect_type_functionLexer::DATABASEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: setText(getText().substr(3, getText().length()-5)); break;

  default:
    break;
  }
}



void detect_type_functionLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  detect_type_functionlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(detect_type_functionlexerLexerOnceFlag, detect_type_functionlexerLexerInitialize);
#endif
}
