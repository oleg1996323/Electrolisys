
// Generated from /home/oster/OsterMath-Backend/grammar/main_lexics.g4 by ANTLR 4.13.1


#include "main_lexics.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Main_lexicsStaticData final {
  Main_lexicsStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Main_lexicsStaticData(const Main_lexicsStaticData&) = delete;
  Main_lexicsStaticData(Main_lexicsStaticData&&) = delete;
  Main_lexicsStaticData& operator=(const Main_lexicsStaticData&) = delete;
  Main_lexicsStaticData& operator=(Main_lexicsStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag main_lexicsLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
Main_lexicsStaticData *main_lexicsLexerStaticData = nullptr;

void main_lexicsLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (main_lexicsLexerStaticData != nullptr) {
    return;
  }
#else
  assert(main_lexicsLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Main_lexicsStaticData>(
    std::vector<std::string>{
      "VAR_TAG", "BEG_ARR", "END_ARR", "DOUBLE_QUOTE", "VARIABLE", "DATABASE", 
      "LARGER", "LARGER_EQUAL", "EQUAL", "LESS", "LESS_EQUAL", "SUMPRODUCT", 
      "SUMPRODUCT_I", "SUM", "SUM_I", "PRODUCT", "PRODUCT_I", "LN", "LG", 
      "LOG_X", "EXP", "SQRT", "PI", "COS", "SIN", "ASIN", "ACOS", "FACTORIAL", 
      "STRING", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
      "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
      "WS", "EOL", "UINT", "Lb", "Rb", "COL", "SEPAR", "ADD", "SUB", "MUL", 
      "DIV", "POW", "QUOTE", "ASTERISK", "INT", "EXPONENT", "FLOAT", "ID_NUMBER"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'VAR'", "'['", "']'", "'\"'", "", "", "'>'", "", "'='", "", "'<'", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'('", "')'", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
      "'^'", "'''"
    },
    std::vector<std::string>{
      "", "VAR_TAG", "BEG_ARR", "END_ARR", "DOUBLE_QUOTE", "VARIABLE", "DATABASE", 
      "LARGER", "LARGER_EQUAL", "EQUAL", "LESS", "LESS_EQUAL", "SUMPRODUCT", 
      "SUMPRODUCT_I", "SUM", "SUM_I", "PRODUCT", "PRODUCT_I", "LN", "LG", 
      "LOG_X", "EXP", "SQRT", "PI", "COS", "SIN", "ASIN", "ACOS", "FACTORIAL", 
      "STRING", "WS", "EOL", "UINT", "Lb", "Rb", "COL", "SEPAR", "ADD", 
      "SUB", "MUL", "DIV", "POW", "QUOTE", "ASTERISK", "EXPONENT", "FLOAT", 
      "ID_NUMBER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,46,423,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
  	1,4,1,4,1,4,3,4,162,8,4,1,4,5,4,165,8,4,10,4,12,4,168,9,4,1,4,1,4,1,5,
  	1,5,1,5,1,5,1,5,1,5,5,5,178,8,5,10,5,12,5,181,9,5,1,5,1,5,1,5,1,5,1,5,
  	1,6,1,6,1,7,1,7,1,7,1,7,3,7,194,8,7,1,8,1,8,1,9,1,9,1,9,1,9,3,9,202,8,
  	9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,
  	18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,
  	21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
  	25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
  	27,1,27,1,28,1,28,5,28,291,8,28,10,28,12,28,294,9,28,1,28,1,28,1,28,5,
  	28,299,8,28,10,28,12,28,302,9,28,1,28,3,28,305,8,28,1,29,1,29,1,30,1,
  	30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,
  	37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,
  	44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
  	51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,4,55,360,8,55,11,55,12,55,361,1,
  	55,1,55,1,56,3,56,367,8,56,1,56,1,56,1,57,4,57,372,8,57,11,57,12,57,373,
  	1,57,3,57,377,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
  	1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,4,68,401,
  	8,68,11,68,12,68,402,1,69,3,69,406,8,69,1,69,1,69,1,70,1,70,1,70,1,71,
  	1,71,1,71,1,71,3,71,417,8,71,1,72,4,72,420,8,72,11,72,12,72,421,0,0,73,
  	1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
  	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
  	26,53,27,55,28,57,29,59,0,61,0,63,0,65,0,67,0,69,0,71,0,73,0,75,0,77,
  	0,79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,0,101,0,103,0,
  	105,0,107,0,109,0,111,30,113,31,115,32,117,33,119,34,121,35,123,36,125,
  	37,127,38,129,39,131,40,133,41,135,42,137,43,139,0,141,44,143,45,145,
  	46,1,0,35,2,0,65,90,97,122,3,0,48,57,65,90,97,122,4,0,48,57,65,90,95,
  	95,97,122,5,0,32,33,35,35,39,41,44,44,59,59,1,0,34,34,1,0,39,39,2,0,65,
  	65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,
  	101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,
  	73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,
  	77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,
  	0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,
  	2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,
  	2,0,89,89,121,121,2,0,90,90,122,122,2,0,9,9,32,32,1,0,48,57,2,0,43,43,
  	45,45,412,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
  	0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
  	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
  	0,0,0,0,137,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,
  	0,0,0,3,151,1,0,0,0,5,153,1,0,0,0,7,155,1,0,0,0,9,157,1,0,0,0,11,171,
  	1,0,0,0,13,187,1,0,0,0,15,193,1,0,0,0,17,195,1,0,0,0,19,201,1,0,0,0,21,
  	203,1,0,0,0,23,205,1,0,0,0,25,216,1,0,0,0,27,220,1,0,0,0,29,224,1,0,0,
  	0,31,228,1,0,0,0,33,236,1,0,0,0,35,240,1,0,0,0,37,243,1,0,0,0,39,246,
  	1,0,0,0,41,252,1,0,0,0,43,256,1,0,0,0,45,261,1,0,0,0,47,264,1,0,0,0,49,
  	268,1,0,0,0,51,272,1,0,0,0,53,275,1,0,0,0,55,278,1,0,0,0,57,304,1,0,0,
  	0,59,306,1,0,0,0,61,308,1,0,0,0,63,310,1,0,0,0,65,312,1,0,0,0,67,314,
  	1,0,0,0,69,316,1,0,0,0,71,318,1,0,0,0,73,320,1,0,0,0,75,322,1,0,0,0,77,
  	324,1,0,0,0,79,326,1,0,0,0,81,328,1,0,0,0,83,330,1,0,0,0,85,332,1,0,0,
  	0,87,334,1,0,0,0,89,336,1,0,0,0,91,338,1,0,0,0,93,340,1,0,0,0,95,342,
  	1,0,0,0,97,344,1,0,0,0,99,346,1,0,0,0,101,348,1,0,0,0,103,350,1,0,0,0,
  	105,352,1,0,0,0,107,354,1,0,0,0,109,356,1,0,0,0,111,359,1,0,0,0,113,366,
  	1,0,0,0,115,371,1,0,0,0,117,378,1,0,0,0,119,380,1,0,0,0,121,382,1,0,0,
  	0,123,384,1,0,0,0,125,386,1,0,0,0,127,388,1,0,0,0,129,390,1,0,0,0,131,
  	392,1,0,0,0,133,394,1,0,0,0,135,396,1,0,0,0,137,398,1,0,0,0,139,405,1,
  	0,0,0,141,409,1,0,0,0,143,412,1,0,0,0,145,419,1,0,0,0,147,148,5,86,0,
  	0,148,149,5,65,0,0,149,150,5,82,0,0,150,2,1,0,0,0,151,152,5,91,0,0,152,
  	4,1,0,0,0,153,154,5,93,0,0,154,6,1,0,0,0,155,156,5,34,0,0,156,8,1,0,0,
  	0,157,158,5,35,0,0,158,166,7,0,0,0,159,162,3,135,67,0,160,162,3,137,68,
  	0,161,159,1,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,165,7,1,0,0,164,
  	161,1,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,
  	0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,6,4,0,0,170,10,1,0,0,0,
  	171,172,5,33,0,0,172,173,5,40,0,0,173,174,5,39,0,0,174,175,1,0,0,0,175,
  	179,7,2,0,0,176,178,8,3,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,
  	0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,39,0,
  	0,183,184,5,41,0,0,184,185,1,0,0,0,185,186,6,5,1,0,186,12,1,0,0,0,187,
  	188,5,62,0,0,188,14,1,0,0,0,189,190,5,62,0,0,190,194,5,61,0,0,191,192,
  	5,61,0,0,192,194,5,62,0,0,193,189,1,0,0,0,193,191,1,0,0,0,194,16,1,0,
  	0,0,195,196,5,61,0,0,196,18,1,0,0,0,197,198,5,60,0,0,198,202,5,61,0,0,
  	199,200,5,61,0,0,200,202,5,60,0,0,201,197,1,0,0,0,201,199,1,0,0,0,202,
  	20,1,0,0,0,203,204,5,60,0,0,204,22,1,0,0,0,205,206,3,95,47,0,206,207,
  	3,99,49,0,207,208,3,83,41,0,208,209,3,89,44,0,209,210,3,93,46,0,210,211,
  	3,87,43,0,211,212,3,65,32,0,212,213,3,99,49,0,213,214,3,63,31,0,214,215,
  	3,97,48,0,215,24,1,0,0,0,216,217,3,23,11,0,217,218,5,95,0,0,218,219,3,
  	75,37,0,219,26,1,0,0,0,220,221,3,95,47,0,221,222,3,99,49,0,222,223,3,
  	83,41,0,223,28,1,0,0,0,224,225,3,27,13,0,225,226,5,95,0,0,226,227,3,75,
  	37,0,227,30,1,0,0,0,228,229,3,89,44,0,229,230,3,93,46,0,230,231,3,87,
  	43,0,231,232,3,65,32,0,232,233,3,99,49,0,233,234,3,63,31,0,234,235,3,
  	97,48,0,235,32,1,0,0,0,236,237,3,31,15,0,237,238,5,95,0,0,238,239,3,75,
  	37,0,239,34,1,0,0,0,240,241,3,81,40,0,241,242,3,85,42,0,242,36,1,0,0,
  	0,243,244,3,81,40,0,244,245,3,71,35,0,245,38,1,0,0,0,246,247,3,81,40,
  	0,247,248,3,87,43,0,248,249,3,71,35,0,249,250,5,95,0,0,250,251,3,105,
  	52,0,251,40,1,0,0,0,252,253,3,67,33,0,253,254,3,105,52,0,254,255,3,89,
  	44,0,255,42,1,0,0,0,256,257,3,95,47,0,257,258,3,91,45,0,258,259,3,93,
  	46,0,259,260,3,97,48,0,260,44,1,0,0,0,261,262,3,89,44,0,262,263,3,75,
  	37,0,263,46,1,0,0,0,264,265,3,63,31,0,265,266,3,87,43,0,266,267,3,95,
  	47,0,267,48,1,0,0,0,268,269,3,95,47,0,269,270,3,75,37,0,270,271,3,85,
  	42,0,271,50,1,0,0,0,272,273,3,59,29,0,273,274,3,49,24,0,274,52,1,0,0,
  	0,275,276,3,59,29,0,276,277,3,47,23,0,277,54,1,0,0,0,278,279,3,69,34,
  	0,279,280,3,59,29,0,280,281,3,63,31,0,281,282,3,97,48,0,282,283,3,87,
  	43,0,283,284,3,93,46,0,284,285,3,75,37,0,285,286,3,59,29,0,286,287,3,
  	81,40,0,287,56,1,0,0,0,288,292,5,34,0,0,289,291,8,4,0,0,290,289,1,0,0,
  	0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,
  	292,1,0,0,0,295,305,5,34,0,0,296,300,5,39,0,0,297,299,8,5,0,0,298,297,
  	1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,
  	0,302,300,1,0,0,0,303,305,5,39,0,0,304,288,1,0,0,0,304,296,1,0,0,0,305,
  	58,1,0,0,0,306,307,7,6,0,0,307,60,1,0,0,0,308,309,7,7,0,0,309,62,1,0,
  	0,0,310,311,7,8,0,0,311,64,1,0,0,0,312,313,7,9,0,0,313,66,1,0,0,0,314,
  	315,7,10,0,0,315,68,1,0,0,0,316,317,7,11,0,0,317,70,1,0,0,0,318,319,7,
  	12,0,0,319,72,1,0,0,0,320,321,7,13,0,0,321,74,1,0,0,0,322,323,7,14,0,
  	0,323,76,1,0,0,0,324,325,7,15,0,0,325,78,1,0,0,0,326,327,7,16,0,0,327,
  	80,1,0,0,0,328,329,7,17,0,0,329,82,1,0,0,0,330,331,7,18,0,0,331,84,1,
  	0,0,0,332,333,7,19,0,0,333,86,1,0,0,0,334,335,7,20,0,0,335,88,1,0,0,0,
  	336,337,7,21,0,0,337,90,1,0,0,0,338,339,7,22,0,0,339,92,1,0,0,0,340,341,
  	7,23,0,0,341,94,1,0,0,0,342,343,7,24,0,0,343,96,1,0,0,0,344,345,7,25,
  	0,0,345,98,1,0,0,0,346,347,7,26,0,0,347,100,1,0,0,0,348,349,7,27,0,0,
  	349,102,1,0,0,0,350,351,7,28,0,0,351,104,1,0,0,0,352,353,7,29,0,0,353,
  	106,1,0,0,0,354,355,7,30,0,0,355,108,1,0,0,0,356,357,7,31,0,0,357,110,
  	1,0,0,0,358,360,7,32,0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,1,0,
  	0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,6,55,2,0,364,112,1,0,0,0,
  	365,367,5,13,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,
  	369,5,10,0,0,369,114,1,0,0,0,370,372,7,33,0,0,371,370,1,0,0,0,372,373,
  	1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,377,3,141,
  	70,0,376,375,1,0,0,0,376,377,1,0,0,0,377,116,1,0,0,0,378,379,5,40,0,0,
  	379,118,1,0,0,0,380,381,5,41,0,0,381,120,1,0,0,0,382,383,5,58,0,0,383,
  	122,1,0,0,0,384,385,5,59,0,0,385,124,1,0,0,0,386,387,5,43,0,0,387,126,
  	1,0,0,0,388,389,5,45,0,0,389,128,1,0,0,0,390,391,5,42,0,0,391,130,1,0,
  	0,0,392,393,5,47,0,0,393,132,1,0,0,0,394,395,5,94,0,0,395,134,1,0,0,0,
  	396,397,5,39,0,0,397,136,1,0,0,0,398,400,5,94,0,0,399,401,5,42,0,0,400,
  	399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,138,1,
  	0,0,0,404,406,7,34,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,
  	0,407,408,3,115,57,0,408,140,1,0,0,0,409,410,7,10,0,0,410,411,3,139,69,
  	0,411,142,1,0,0,0,412,413,3,139,69,0,413,414,5,46,0,0,414,416,3,115,57,
  	0,415,417,3,141,70,0,416,415,1,0,0,0,416,417,1,0,0,0,417,144,1,0,0,0,
  	418,420,7,33,0,0,419,418,1,0,0,0,420,421,1,0,0,0,421,419,1,0,0,0,421,
  	422,1,0,0,0,422,146,1,0,0,0,18,0,161,164,166,179,193,201,292,300,304,
  	361,366,373,376,402,405,416,421,3,1,4,0,1,5,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  main_lexicsLexerStaticData = staticData.release();
}

}

main_lexics::main_lexics(CharStream *input) : Lexer(input) {
  main_lexics::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *main_lexicsLexerStaticData->atn, main_lexicsLexerStaticData->decisionToDFA, main_lexicsLexerStaticData->sharedContextCache);
}

main_lexics::~main_lexics() {
  delete _interpreter;
}

std::string main_lexics::getGrammarFileName() const {
  return "main_lexics.g4";
}

const std::vector<std::string>& main_lexics::getRuleNames() const {
  return main_lexicsLexerStaticData->ruleNames;
}

const std::vector<std::string>& main_lexics::getChannelNames() const {
  return main_lexicsLexerStaticData->channelNames;
}

const std::vector<std::string>& main_lexics::getModeNames() const {
  return main_lexicsLexerStaticData->modeNames;
}

const dfa::Vocabulary& main_lexics::getVocabulary() const {
  return main_lexicsLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView main_lexics::getSerializedATN() const {
  return main_lexicsLexerStaticData->serializedATN;
}

const atn::ATN& main_lexics::getATN() const {
  return *main_lexicsLexerStaticData->atn;
}


void main_lexics::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 4: VARIABLEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 5: DATABASEAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void main_lexics::VARIABLEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: setText(getText().substr(1, getText().length()-1)); break;

  default:
    break;
  }
}

void main_lexics::DATABASEAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: setText(getText().substr(3, getText().length()-5)); break;

  default:
    break;
  }
}



void main_lexics::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  main_lexicsLexerInitialize();
#else
  ::antlr4::internal::call_once(main_lexicsLexerOnceFlag, main_lexicsLexerInitialize);
#endif
}
